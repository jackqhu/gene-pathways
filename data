{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"SyJfZQmWcL2n"},"outputs":[],"source":["import pandas as pd"]},{"cell_type":"code","source":[],"metadata":{"id":"Y59u6IfDGNwX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"dmXHXYudkF8L"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/gdrive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H5NxACx7tY27","executionInfo":{"status":"ok","timestamp":1732572289967,"user_tz":300,"elapsed":26555,"user":{"displayName":"Geordan Bolden","userId":"02910652656185330693"}},"outputId":"f4706f42-c073-4c72-b1e5-8c85a8576f61"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/gdrive\n"]}]},{"cell_type":"code","source":["file1 = 'gdrive/MyDrive/Colab_Notebooks/gene_to_pathway.txt'\n","file2 = 'gdrive/MyDrive/Colab_Notebooks/pathway_names.txt'\n","file3 = 'gdrive/MyDrive/Colab_Notebooks/symbol_gene_info.txt'"],"metadata":{"id":"MERhJA69seQh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["gene_to_pathway = pd.read_csv(file1, sep = \"\\t\", header = None, names = [\"GENE_ID\",\"PATHWAY_ID\"])\n","pathway_names = pd.read_csv(file2, sep = \"\\t\", header = None, names = [\"PATHWAY_ID\",\"PATHWAY_NAME\"])\n","symbol_gene_info = pd.read_csv(file3, sep = \"\\t\", header = None, names = [\"GENE_ID\", \"TYPE\", \"TYPE_DESCRIPTION\", \"GENE_INFO\"])"],"metadata":{"id":"W80sA12XdW7U"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pathway_names['PATHWAY_ID'] = pathway_names['PATHWAY_ID'].str.replace(r'^hsa', 'path:hsa', regex = True)"],"metadata":{"id":"zuHHgiMIu8kv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["merge_1 = pd.merge(gene_to_pathway, symbol_gene_info, on = \"GENE_ID\").dropna()"],"metadata":{"id":"Cmjca0aPvJj0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["merge_2 = pd.merge(merge_1, pathway_names, on = \"PATHWAY_ID\")"],"metadata":{"id":"d1yPgB6TvM0E"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Step 2: Compute the number of overlapping genes between every 2 pathways.\n","# END RESULT: PATHWAY_ID1, PATHWAY_NAME1, PATHWAY_ID2, PATHWAY_NAME2, NUMBER_OF_OVERLAPPING_GENES, LIST_OF_OVERLAPPING_GENES"],"metadata":{"id":"15_KgIhZvM4L"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pathway_names_dict = merge_2.groupby('PATHWAY_ID')['PATHWAY_NAME'].apply(set).to_dict()"],"metadata":{"id":"HqfO3KJ9vM8O"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pathway_genes_dict = merge_2.groupby('PATHWAY_ID')['GENE_ID'].apply(set).to_dict()"],"metadata":{"id":"O4OgRBK5vM-y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pathway_genes_dict = merge_2.groupby('PATHWAY_ID')['GENE_ID'].apply(set).to_dict()"],"metadata":{"id":"eFcY5WqevNBZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["overlap_list = []\n","pathway_ids = list(pathway_genes_dict.keys())\n","for i in range(len(pathway_ids)):\n","    for j in range(i + 1, len(pathway_ids)):\n","        pathway_id1 = pathway_ids[i]\n","        pathway_id2 = pathway_ids[j]\n","\n","        genes1 = pathway_genes_dict[pathway_id1]\n","        genes2 = pathway_genes_dict[pathway_id2]\n","\n","        pathway_name1 = pathway_names_dict[pathway_id1] if pathway_id1 in pathway_names_dict else \"Unknown\"\n","        pathway_name2 = pathway_names_dict[pathway_id2] if pathway_id2 in pathway_names_dict else \"Unknown\"\n","\n","        overlapping_genes = genes1.intersection(genes2)\n","        num_overlapping_genes = len(overlapping_genes)\n","\n","        if num_overlapping_genes > 0:\n","            overlap_list.append({\n","                \"PATHWAY_ID1\": pathway_id1,\n","                \"PATHWAY_NAME1\":pathway_name1,\n","                \"PATHWAY_ID2\": pathway_id2,\n","                \"PATHWAY_NAME2\":pathway_name2,\n","                \"NUMBER_OF_OVERLAPPING_GENES\": num_overlapping_genes,\n","                \"LIST_OF_OVERLAPPING_GENES\": list(overlapping_genes)\n","            })"],"metadata":{"id":"WSs7suh4vNDo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["overlap_df = pd.DataFrame(overlap_list)\n","overlap_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":597},"id":"bpLqJzMOvNGL","executionInfo":{"status":"ok","timestamp":1732572329130,"user_tz":300,"elapsed":171,"user":{"displayName":"Geordan Bolden","userId":"02910652656185330693"}},"outputId":"2a8ad772-440e-40ae-9174-171735fc3493","collapsed":true},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         PATHWAY_ID1                                      PATHWAY_NAME1  \\\n","0      path:hsa00010  {Glycolysis / Gluconeogenesis - Homo sapiens (...   \n","1      path:hsa00010  {Glycolysis / Gluconeogenesis - Homo sapiens (...   \n","2      path:hsa00010  {Glycolysis / Gluconeogenesis - Homo sapiens (...   \n","3      path:hsa00010  {Glycolysis / Gluconeogenesis - Homo sapiens (...   \n","4      path:hsa00010  {Glycolysis / Gluconeogenesis - Homo sapiens (...   \n","...              ...                                                ...   \n","22213  path:hsa05415   {Diabetic cardiomyopathy - Homo sapiens (human)}   \n","22214  path:hsa05415   {Diabetic cardiomyopathy - Homo sapiens (human)}   \n","22215  path:hsa05416         {Viral myocarditis - Homo sapiens (human)}   \n","22216  path:hsa05416         {Viral myocarditis - Homo sapiens (human)}   \n","22217  path:hsa05417  {Lipid and atherosclerosis - Homo sapiens (hum...   \n","\n","         PATHWAY_ID2                                      PATHWAY_NAME2  \\\n","0      path:hsa00020  {Citrate cycle (TCA cycle) - Homo sapiens (hum...   \n","1      path:hsa00030  {Pentose phosphate pathway - Homo sapiens (hum...   \n","2      path:hsa00040  {Pentose and glucuronate interconversions - Ho...   \n","3      path:hsa00051  {Fructose and mannose metabolism - Homo sapien...   \n","4      path:hsa00052      {Galactose metabolism - Homo sapiens (human)}   \n","...              ...                                                ...   \n","22213  path:hsa05417  {Lipid and atherosclerosis - Homo sapiens (hum...   \n","22214  path:hsa05418  {Fluid shear stress and atherosclerosis - Homo...   \n","22215  path:hsa05417  {Lipid and atherosclerosis - Homo sapiens (hum...   \n","22216  path:hsa05418  {Fluid shear stress and atherosclerosis - Homo...   \n","22217  path:hsa05418  {Fluid shear stress and atherosclerosis - Homo...   \n","\n","       NUMBER_OF_OVERLAPPING_GENES  \\\n","0                                7   \n","1                               11   \n","2                                1   \n","3                               13   \n","4                               14   \n","...                            ...   \n","22213                           39   \n","22214                           28   \n","22215                            9   \n","22216                            8   \n","22217                           59   \n","\n","                               LIST_OF_OVERLAPPING_GENES  \n","0      [hsa:5106, hsa:1737, hsa:1738, hsa:5160, hsa:5...  \n","1      [hsa:5236, hsa:5213, hsa:230, hsa:229, hsa:878...  \n","2                                            [hsa:10327]  \n","3      [hsa:5213, hsa:229, hsa:8789, hsa:2203, hsa:52...  \n","4      [hsa:5236, hsa:5213, hsa:5214, hsa:80201, hsa:...  \n","...                                                  ...  \n","22213  [hsa:817, hsa:1432, hsa:6300, hsa:4689, hsa:47...  \n","22214  [hsa:5880, hsa:1432, hsa:6300, hsa:4790, hsa:1...  \n","22215  [hsa:3383, hsa:5879, hsa:958, hsa:842, hsa:542...  \n","22216  [hsa:5880, hsa:3383, hsa:5879, hsa:859, hsa:71...  \n","22217  [hsa:1432, hsa:5609, hsa:387, hsa:801, hsa:332...  \n","\n","[22218 rows x 6 columns]"],"text/html":["\n","  <div id=\"df-5196e2eb-76ef-46f8-a2ff-9b88e5da7ab4\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PATHWAY_ID1</th>\n","      <th>PATHWAY_NAME1</th>\n","      <th>PATHWAY_ID2</th>\n","      <th>PATHWAY_NAME2</th>\n","      <th>NUMBER_OF_OVERLAPPING_GENES</th>\n","      <th>LIST_OF_OVERLAPPING_GENES</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>path:hsa00010</td>\n","      <td>{Glycolysis / Gluconeogenesis - Homo sapiens (...</td>\n","      <td>path:hsa00020</td>\n","      <td>{Citrate cycle (TCA cycle) - Homo sapiens (hum...</td>\n","      <td>7</td>\n","      <td>[hsa:5106, hsa:1737, hsa:1738, hsa:5160, hsa:5...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>path:hsa00010</td>\n","      <td>{Glycolysis / Gluconeogenesis - Homo sapiens (...</td>\n","      <td>path:hsa00030</td>\n","      <td>{Pentose phosphate pathway - Homo sapiens (hum...</td>\n","      <td>11</td>\n","      <td>[hsa:5236, hsa:5213, hsa:230, hsa:229, hsa:878...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>path:hsa00010</td>\n","      <td>{Glycolysis / Gluconeogenesis - Homo sapiens (...</td>\n","      <td>path:hsa00040</td>\n","      <td>{Pentose and glucuronate interconversions - Ho...</td>\n","      <td>1</td>\n","      <td>[hsa:10327]</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>path:hsa00010</td>\n","      <td>{Glycolysis / Gluconeogenesis - Homo sapiens (...</td>\n","      <td>path:hsa00051</td>\n","      <td>{Fructose and mannose metabolism - Homo sapien...</td>\n","      <td>13</td>\n","      <td>[hsa:5213, hsa:229, hsa:8789, hsa:2203, hsa:52...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>path:hsa00010</td>\n","      <td>{Glycolysis / Gluconeogenesis - Homo sapiens (...</td>\n","      <td>path:hsa00052</td>\n","      <td>{Galactose metabolism - Homo sapiens (human)}</td>\n","      <td>14</td>\n","      <td>[hsa:5236, hsa:5213, hsa:5214, hsa:80201, hsa:...</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>22213</th>\n","      <td>path:hsa05415</td>\n","      <td>{Diabetic cardiomyopathy - Homo sapiens (human)}</td>\n","      <td>path:hsa05417</td>\n","      <td>{Lipid and atherosclerosis - Homo sapiens (hum...</td>\n","      <td>39</td>\n","      <td>[hsa:817, hsa:1432, hsa:6300, hsa:4689, hsa:47...</td>\n","    </tr>\n","    <tr>\n","      <th>22214</th>\n","      <td>path:hsa05415</td>\n","      <td>{Diabetic cardiomyopathy - Homo sapiens (human)}</td>\n","      <td>path:hsa05418</td>\n","      <td>{Fluid shear stress and atherosclerosis - Homo...</td>\n","      <td>28</td>\n","      <td>[hsa:5880, hsa:1432, hsa:6300, hsa:4790, hsa:1...</td>\n","    </tr>\n","    <tr>\n","      <th>22215</th>\n","      <td>path:hsa05416</td>\n","      <td>{Viral myocarditis - Homo sapiens (human)}</td>\n","      <td>path:hsa05417</td>\n","      <td>{Lipid and atherosclerosis - Homo sapiens (hum...</td>\n","      <td>9</td>\n","      <td>[hsa:3383, hsa:5879, hsa:958, hsa:842, hsa:542...</td>\n","    </tr>\n","    <tr>\n","      <th>22216</th>\n","      <td>path:hsa05416</td>\n","      <td>{Viral myocarditis - Homo sapiens (human)}</td>\n","      <td>path:hsa05418</td>\n","      <td>{Fluid shear stress and atherosclerosis - Homo...</td>\n","      <td>8</td>\n","      <td>[hsa:5880, hsa:3383, hsa:5879, hsa:859, hsa:71...</td>\n","    </tr>\n","    <tr>\n","      <th>22217</th>\n","      <td>path:hsa05417</td>\n","      <td>{Lipid and atherosclerosis - Homo sapiens (hum...</td>\n","      <td>path:hsa05418</td>\n","      <td>{Fluid shear stress and atherosclerosis - Homo...</td>\n","      <td>59</td>\n","      <td>[hsa:1432, hsa:5609, hsa:387, hsa:801, hsa:332...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>22218 rows × 6 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5196e2eb-76ef-46f8-a2ff-9b88e5da7ab4')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5196e2eb-76ef-46f8-a2ff-9b88e5da7ab4 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5196e2eb-76ef-46f8-a2ff-9b88e5da7ab4');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-dea7387a-0c41-4b79-b5e8-53be7307668c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-dea7387a-0c41-4b79-b5e8-53be7307668c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-dea7387a-0c41-4b79-b5e8-53be7307668c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_5b1aa930-3093-4e64-8868-628a494b93cf\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('overlap_df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_5b1aa930-3093-4e64-8868-628a494b93cf button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('overlap_df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"overlap_df","summary":"{\n  \"name\": \"overlap_df\",\n  \"rows\": 22218,\n  \"fields\": [\n    {\n      \"column\": \"PATHWAY_ID1\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 359,\n        \"samples\": [\n          \"path:hsa04742\",\n          \"path:hsa00514\",\n          \"path:hsa05032\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PATHWAY_NAME1\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PATHWAY_ID2\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 344,\n        \"samples\": [\n          \"path:hsa01522\",\n          \"path:hsa05222\",\n          \"path:hsa05223\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PATHWAY_NAME2\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NUMBER_OF_OVERLAPPING_GENES\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16,\n        \"min\": 1,\n        \"max\": 339,\n        \"num_unique_values\": 150,\n        \"samples\": [\n          74,\n          4,\n          88\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LIST_OF_OVERLAPPING_GENES\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["# step 3: Save the result to a file KEGG_crosstalk.csv with the following columns:"],"metadata":{"id":"s1327F6LvNIe"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["overlap_df.to_csv('KEGG_crosstalk.csv', sep = '\\t', index = False)\n","\n","\n"],"metadata":{"id":"N1Kah_NRvNKw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#4. Compute a rank of the genes based on how many pathways they appear on and save it to a file.\n","\n","from collections import Counter\n","\n","# Create a dictionary to count gene occurrences across pathways\n","gene_pathway_count = Counter()\n","\n","# Count the number of pathways each gene appears in\n","for genes in pathway_genes_dict.values():\n","    gene_pathway_count.update(genes)\n","\n","# Create a list of dictionaries with gene information\n","gene_rank_list = [\n","    {\n","        \"GENE\": gene,\n","        \"PATHWAY_COUNT\": count,\n","        \"PATHWAYS\": [\n","            pathway_id for pathway_id, genes in pathway_genes_dict.items() if gene in genes\n","        ]\n","    }\n","    for gene, count in gene_pathway_count.items()\n","]\n","\n","# Create a DataFrame from the list\n","gene_rank_df = pd.DataFrame(gene_rank_list)\n","\n","# Sort the DataFrame by pathway count in descending order\n","gene_rank_df = gene_rank_df.sort_values(\"PATHWAY_COUNT\", ascending=False).reset_index(drop=True)\n","\n","# Add a rank column\n","gene_rank_df[\"RANK\"] = gene_rank_df.index + 1\n","\n","# Reorder columns\n","gene_rank_df = gene_rank_df[[\"RANK\", \"GENE\", \"PATHWAY_COUNT\", \"PATHWAYS\"]]\n","\n","# Save the DataFrame to a CSV file\n","output_file = \"gene_pathway_rank.csv\"\n","gene_rank_df.to_csv(output_file, index=False)\n","\n","print(f\"Gene pathway rank has been saved to {output_file}\")\n","\n","# Display the first few rows of the DataFrame\n","print(gene_rank_df.head())\n","\n","\n"],"metadata":{"id":"LlV654BCkLoA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732572350311,"user_tz":300,"elapsed":871,"user":{"displayName":"Geordan Bolden","userId":"02910652656185330693"}},"outputId":"db920066-08ae-49ca-f1a2-b5646d449a5c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Gene pathway rank has been saved to gene_pathway_rank.csv\n","   RANK      GENE  PATHWAY_COUNT  \\\n","0     1  hsa:5595            118   \n","1     2  hsa:5594            118   \n","2     3  hsa:5293            106   \n","3     4  hsa:5291            106   \n","4     5  hsa:5290            106   \n","\n","                                            PATHWAYS  \n","0  [path:hsa01521, path:hsa01522, path:hsa01524, ...  \n","1  [path:hsa01521, path:hsa01522, path:hsa01524, ...  \n","2  [path:hsa00562, path:hsa01100, path:hsa01521, ...  \n","3  [path:hsa00562, path:hsa01100, path:hsa01521, ...  \n","4  [path:hsa00562, path:hsa01100, path:hsa01521, ...  \n"]}]},{"cell_type":"code","source":["#5. Retrieve a set of the pathways the top 3 genes appear on.\n"],"metadata":{"id":"Llf5G4Uuuwi5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","\n","# Get the top 3 genes\n","top_3_genes = gene_rank_df['GENE'].head(3).tolist()\n","\n","# Initialize a set to store unique pathways\n","top_3_pathways = set()\n","\n","# Iterate through the top 3 genes and add their pathways to the set\n","for gene in top_3_genes:\n","    gene_pathways = gene_rank_df[gene_rank_df['GENE'] == gene]['PATHWAYS'].iloc[0]\n","    top_3_pathways.update(gene_pathways)\n","\n","# Print the results\n","print(f\"Top 3 genes: {', '.join(top_3_genes)}\")\n","print(f\"Number of unique pathways for top 3 genes: {len(top_3_pathways)}\")\n","print(\"Pathways:\")\n","for pathway in sorted(top_3_pathways):\n","    print(f\"- {pathway}\")\n","\n","# Optionally, save the pathways to a file\n","with open('top_3_genes_pathways.txt', 'w') as f:\n","    f.write(f\"Top 3 genes: {', '.join(top_3_genes)}\\n\")\n","    f.write(f\"Number of unique pathways: {len(top_3_pathways)}\\n\")\n","    f.write(\"Pathways:\\n\")\n","    for pathway in sorted(top_3_pathways):\n","        f.write(f\"- {pathway}\\n\")\n","\n","print(\"Pathways for top 3 genes have been saved to 'top_3_genes_pathways.txt'\")"],"metadata":{"id":"Hsl-yGlKuwY0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732572361021,"user_tz":300,"elapsed":141,"user":{"displayName":"Geordan Bolden","userId":"02910652656185330693"}},"outputId":"0fe250f1-ccef-48d7-88f3-997f8f186849"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Top 3 genes: hsa:5595, hsa:5594, hsa:5293\n","Number of unique pathways for top 3 genes: 140\n","Pathways:\n","- path:hsa00562\n","- path:hsa01100\n","- path:hsa01521\n","- path:hsa01522\n","- path:hsa01524\n","- path:hsa04010\n","- path:hsa04012\n","- path:hsa04014\n","- path:hsa04015\n","- path:hsa04022\n","- path:hsa04024\n","- path:hsa04062\n","- path:hsa04066\n","- path:hsa04068\n","- path:hsa04070\n","- path:hsa04071\n","- path:hsa04072\n","- path:hsa04114\n","- path:hsa04140\n","- path:hsa04148\n","- path:hsa04150\n","- path:hsa04151\n","- path:hsa04152\n","- path:hsa04210\n","- path:hsa04211\n","- path:hsa04213\n","- path:hsa04218\n","- path:hsa04261\n","- path:hsa04270\n","- path:hsa04350\n","- path:hsa04360\n","- path:hsa04370\n","- path:hsa04371\n","- path:hsa04380\n","- path:hsa04510\n","- path:hsa04520\n","- path:hsa04540\n","- path:hsa04550\n","- path:hsa04611\n","- path:hsa04613\n","- path:hsa04620\n","- path:hsa04621\n","- path:hsa04625\n","- path:hsa04630\n","- path:hsa04650\n","- path:hsa04657\n","- path:hsa04658\n","- path:hsa04659\n","- path:hsa04660\n","- path:hsa04662\n","- path:hsa04664\n","- path:hsa04666\n","- path:hsa04668\n","- path:hsa04670\n","- path:hsa04713\n","- path:hsa04720\n","- path:hsa04722\n","- path:hsa04723\n","- path:hsa04724\n","- path:hsa04725\n","- path:hsa04726\n","- path:hsa04730\n","- path:hsa04750\n","- path:hsa04810\n","- path:hsa04910\n","- path:hsa04912\n","- path:hsa04914\n","- path:hsa04915\n","- path:hsa04916\n","- path:hsa04917\n","- path:hsa04919\n","- path:hsa04921\n","- path:hsa04923\n","- path:hsa04926\n","- path:hsa04928\n","- path:hsa04929\n","- path:hsa04930\n","- path:hsa04931\n","- path:hsa04932\n","- path:hsa04933\n","- path:hsa04934\n","- path:hsa04935\n","- path:hsa04960\n","- path:hsa04973\n","- path:hsa05010\n","- path:hsa05017\n","- path:hsa05020\n","- path:hsa05022\n","- path:hsa05034\n","- path:hsa05100\n","- path:hsa05130\n","- path:hsa05131\n","- path:hsa05132\n","- path:hsa05133\n","- path:hsa05135\n","- path:hsa05140\n","- path:hsa05142\n","- path:hsa05145\n","- path:hsa05146\n","- path:hsa05152\n","- path:hsa05160\n","- path:hsa05161\n","- path:hsa05162\n","- path:hsa05163\n","- path:hsa05164\n","- path:hsa05165\n","- path:hsa05166\n","- path:hsa05167\n","- path:hsa05168\n","- path:hsa05169\n","- path:hsa05170\n","- path:hsa05171\n","- path:hsa05200\n","- path:hsa05203\n","- path:hsa05205\n","- path:hsa05206\n","- path:hsa05207\n","- path:hsa05208\n","- path:hsa05210\n","- path:hsa05211\n","- path:hsa05212\n","- path:hsa05213\n","- path:hsa05214\n","- path:hsa05215\n","- path:hsa05216\n","- path:hsa05218\n","- path:hsa05219\n","- path:hsa05220\n","- path:hsa05221\n","- path:hsa05222\n","- path:hsa05223\n","- path:hsa05224\n","- path:hsa05225\n","- path:hsa05226\n","- path:hsa05230\n","- path:hsa05231\n","- path:hsa05235\n","- path:hsa05415\n","- path:hsa05417\n","- path:hsa05418\n","Pathways for top 3 genes have been saved to 'top_3_genes_pathways.txt'\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"F1cMCbRaSQPz"},"execution_count":null,"outputs":[]}]}